// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bizapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BizApiClient is the client API for BizApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizApiClient interface {
	OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error)
	OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*OnEventResponse, error)
}

type bizApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBizApiClient(cc grpc.ClientConnInterface) BizApiClient {
	return &bizApiClient{cc}
}

func (c *bizApiClient) OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error) {
	out := new(OnMessageResponse)
	err := c.cc.Invoke(ctx, "/bizapi.BizApi/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizApiClient) OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*OnEventResponse, error) {
	out := new(OnEventResponse)
	err := c.cc.Invoke(ctx, "/bizapi.BizApi/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizApiServer is the server API for BizApi service.
// All implementations must embed UnimplementedBizApiServer
// for forward compatibility
type BizApiServer interface {
	OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error)
	OnEvent(context.Context, *OnEventRequest) (*OnEventResponse, error)
	mustEmbedUnimplementedBizApiServer()
}

// UnimplementedBizApiServer must be embedded to have forward compatible implementations.
type UnimplementedBizApiServer struct {
}

func (UnimplementedBizApiServer) OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedBizApiServer) OnEvent(context.Context, *OnEventRequest) (*OnEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedBizApiServer) mustEmbedUnimplementedBizApiServer() {}

// UnsafeBizApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizApiServer will
// result in compilation errors.
type UnsafeBizApiServer interface {
	mustEmbedUnimplementedBizApiServer()
}

func RegisterBizApiServer(s grpc.ServiceRegistrar, srv BizApiServer) {
	s.RegisterService(&BizApi_ServiceDesc, srv)
}

func _BizApi_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizApiServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bizapi.BizApi/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizApiServer).OnMessage(ctx, req.(*OnMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizApi_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizApiServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bizapi.BizApi/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizApiServer).OnEvent(ctx, req.(*OnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BizApi_ServiceDesc is the grpc.ServiceDesc for BizApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bizapi.BizApi",
	HandlerType: (*BizApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _BizApi_OnMessage_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _BizApi_OnEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bizapi.proto",
}
